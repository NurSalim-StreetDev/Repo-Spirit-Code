


<!doctype html>
<html lang="en">
  <head>
    
    <link href="https://cdn.realpython.com" rel="preconnect">
    <link href="https://files.realpython.com" rel="preconnect">

    <title>Python&#x27;s sum(): The Pythonic Way to Sum Values – Real Python</title>
    <meta name="author" content="Real Python">
    <meta name="description" content="In this step-by-step tutorial, you&#x27;ll learn how to use Python&#x27;s sum() function to add numeric values together. You also learn how to concatenate sequences, such as lists and tuples, using sum().">
    <meta name="keywords" content="">

    
  


    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover">

    
      <link rel="stylesheet" href="https://cdn.realpython.com/static/realpython.min.1a28062d0366.css">
      <link rel="stylesheet" href="https://cdn.realpython.com/static/gfonts/font.5ac42994de49.css">
      <link rel="preload" href="https://cdn.realpython.com/static/glightbox.min.9b438b29cef1.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><noscript><link rel="stylesheet" href="https://cdn.realpython.com/static/glightbox.min.9b438b29cef1.css"></noscript>
    

    
  


    
    
      <link rel="canonical" href="https://realpython.com/python-sum-function/">

      
      
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:image" content="https://files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg">
        <meta property="og:image" content="https://files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg">
      
      <meta name="twitter:creator" content="@realpython">
      <meta name="twitter:site" content="@realpython">
      <meta property="og:title" content="Python&#x27;s sum(): The Pythonic Way to Sum Values – Real Python">
      <meta property="og:type" content="article">
      <meta property="og:url" content="https://realpython.com/python-sum-function/">
      <meta property="og:description" content="In this step-by-step tutorial, you&#x27;ll learn how to use Python&#x27;s sum() function to add numeric values together. You also learn how to concatenate sequences, such as lists and tuples, using sum().">
    

    <link href="https://cdn.realpython.com/static/favicon.68cbf4197b0c.png" rel="icon">
    <link href="https://realpython.com/atom.xml" rel="alternate" title="Real Python" type="application/atom+xml">
    <link rel="manifest" href="/manifest.json">

    

    
    

    
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-35184939-1', 'auto', {'allowLinker': true});

  

  

  
  
  ga('set', {
    dimension1: false,
    dimension2: false
  });
  

  ga('send', 'pageview');
  
</script>

  </head>
  <body >
    
      


<nav class="navbar fixed-top navbar-expand-lg navbar-dark flex-column ">
  <div class="container flex-row">

    <a class="navbar-brand" href="/">
      <img src="https://cdn.realpython.com/static/real-python-logo.893c30edea53.svg" width="165" height="40" class="d-inline-block align-top" alt="Real Python">
    </a>

    
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse navbar-nav-scroll" id="navbarSupportedContent" role="navigation" aria-label="Main Navigation">

      <ul class="navbar-nav mr-2">

        <li class="nav-item">
          <a class="nav-link" href="/start-here/">Start&nbsp;Here</a>
        </li>

        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownLibrary" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <span class="fa fa-graduation-cap" aria-hidden="true"></span> Learn Python
          </a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownLibrary">
            <a class="dropdown-item" href="/search?kind=article&kind=course&order=newest" style="color: #ff7e73; line-height: 110%;"><i class="fa fa-fw mr-1 fa-graduation-cap" aria-hidden="true"></i> Python Tutorials →<br><small class="text-secondary">In-depth articles and video courses</small></a>
            
            <a class="dropdown-item" href="/learning-paths/" style="color: #ffc873; line-height: 110%;"><i class="fa fa-fw mr-1 fa-map-o" aria-hidden="true"></i> Learning Paths →<br><small class="text-secondary">Guided study plans for accelerated learning</small></a>
            <a class="dropdown-item" href="/quizzes/" style="color: #abe0e5; line-height: 110%;"><i class="fa fa-fw mr-1 fa-trophy" aria-hidden="true"></i> Quizzes →<br><small class="text-secondary">Check your learning progress</small></a>
            <a class="dropdown-item" href="/tutorials/all/" style="color: #ccc; line-height: 110%;"><i class="fa fa-fw mr-1 fa-tags" aria-hidden="true"></i> Browse Topics →<br><small class="text-secondary">Focus on a specific area or skill level</small></a>
            <a class="dropdown-item" href="/community/" style="color: #e5c6ab; line-height: 110%;"><i class="fa fa-fw mr-1 fa-slack" aria-hidden="true"></i> Community Chat →<br><small class="text-secondary">Learn with other Pythonistas</small></a>
            <a class="dropdown-item" href="/office-hours/" style="color: #e5c6ab; line-height: 110%;"><i class="fa fa-fw mr-1 fa-users" aria-hidden="true"></i> Office Hours →<br><small class="text-secondary">Live Q&A calls with Python experts</small></a>
            <a class="dropdown-item" href="/podcasts/rpp/" style="color: #b8abe5; line-height: 110%;"><i class="fa fa-fw mr-1 fa-podcast" aria-hidden="true"></i> Podcast →<br><small class="text-secondary">Hear what’s new in the world of Python</small></a>
            <a class="dropdown-item pb-3" href="/products/books/" style="color: #abe5b1; line-height: 110%;"><i class="fa fa-fw mr-1 fa-book" aria-hidden="true"></i> Books →<br><small class="text-secondary">Round out your knowledge and learn offline</small></a>
            
              <a class="dropdown-item border-top text-warning" href="/account/join/"><i class="fa fa-fw fa-star text-warning" aria-hidden="true"></i> Unlock All Content →</a>
            
          </div>
        </li>

        

        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMore" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            More
          </a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownMore">
            <a class="dropdown-item" href="/products/">Python Learning Resources</a>
            <a class="dropdown-item" href="/newsletter/">Python Newsletter</a>
            <a class="dropdown-item" href="https://www.pythonjobshq.com" target="_blank">Python Job Board</a>
            <a class="dropdown-item" href="/team/">Meet the Team</a>
            <a class="dropdown-item" href="/write-for-us/">Become a Tutorial Author</a>
            <a class="dropdown-item" href="/become-an-instructor/">Become a Video Instructor</a>
          </div>
        </li>

      </ul> 

      
      <div class="d-block d-lg-none"> 
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/search" title="Search"><span class="d-block d-lg-none"><i class="fa fa-search" aria-hidden="true"></i> Search</span><span class="d-none d-lg-block"><i class="fa fa-search" aria-hidden="true"></i></span></a>
          </li>
        </ul>
      </div>
      
      <div class="d-none d-lg-flex align-items-center mr-2 flex-fill">
        <form class="form-inline w-100" action="/search" method="GET">
          <a class="js-search-form-submit position-absolute" href="/search" title="Search"><i class="fa fa-search fa-fw text-muted pl-2" aria-hidden="true"></i></a>
          <input class="search-field form-control form-control-md mr-sm-1 mr-lg-2 w-100" style="padding-left: 2rem;" maxlength=50 type="search" placeholder="Search" aria-label="Search" name="q" autocomplete="off">
          <input type="hidden" name="_from" value="nav">
        </form>
      </div>
      

      <ul class="navbar-nav ml-auto">
        
          <li class="nav-item form-inline">
            <a class="ml-2 ml-lg-0 btn btn-sm btn-primary px-3" href="/account/join/">Join</a>
          </li>
          <li class="nav-item">
            <a class="btn text-light" href="/account/login/?next=%2Fpython-sum-function%2F">Sign&#8209;In</a>
          </li>
        
      </ul>

    
    </div>

  </div>

  

</nav>

    

    <div class="container main-content">
      

      
  <div class="row justify-content-center">

    <div class="col-md-11 col-lg-8 article with-headerlinks">
      

  
    <figure class="embed-responsive embed-responsive-16by9">
      
        <img class="card-img-top m-0 p-0 embed-responsive-item rounded" style="object-fit: contain;" alt="Python&#x27;s sum(): The Pythonic Way to Sum Values" src="https://files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg" width="1920" height="1080" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg&amp;w=480&amp;sig=2a9a2e84142783353464543aecc864dc4e165133 480w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg&amp;w=960&amp;sig=c2d6c904a4eb9efb00395cd10cf23ea1fb7ab18d 960w, https://files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg 1920w" sizes="75vw">
      
    </figure>
  

  <h1>Python&#x27;s sum(): The Pythonic Way to Sum Values</h1>
  <div class="mb-0">
    
      <span class="text-muted">by <a class="text-muted" href="#author">Leodanis Pozo Ramos</a>
    
    
    
      <span class="ml-2 mr-1 fa fa-comments"></span><a class="text-muted" href="#reader-comments"><span class="disqus-comment-count" data-disqus-identifier="https://realpython.com/python-sum-function/"></span></a>
    
    
    <span class="ml-2 fa fa-tags" aria-hidden="true"></span>
    
      <a href="/tutorials/basics/" class="badge badge-light text-muted">basics</a>
    
      <a href="/tutorials/python/" class="badge badge-light text-muted">python</a>
    
    <div class="d-sm-flex flex-row justify-content-between my-3 text-center">
      <div class="jsCompletionStatusWidget btn-group mb-0">
  <button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
  <button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><i class="fa fa-fw fa-bookmark-o"></i></button>
</div>

      
      
        <div class="align-self-center my-2">
          
<span>
  <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check out this %23Python tutorial: Python%27s%20sum%28%29%3A%20The%20Pythonic%20Way%20to%20Sum%20Values by @realpython&url=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
  <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
  
  <a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&body=Check out this Python tutorial:%0A%0APython%27s%20sum%28%29%3A%20The%20Pythonic%20Way%20to%20Sum%20Values%0A%0Ahttps%3A//realpython.com/python-sum-function/" class="badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>

        </div>
      
    </div>
  </div>

  

  <div class="article-body">
    
      <div class="bg-light sidebar-module sidebar-module-inset" id="toc">
        <p class="h3 mb-2 text-muted">Table of Contents</p>
        <div class="toc">
<ul>
<li><a href="#understanding-the-summation-problem">Understanding the Summation Problem</a></li>
<li><a href="#getting-started-with-pythons-sum">Getting Started With Python&rsquo;s sum()</a><ul>
<li><a href="#the-required-argument-iterable">The Required Argument: iterable</a></li>
<li><a href="#the-optional-argument-start">The Optional Argument: start</a></li>
</ul>
</li>
<li><a href="#summing-numeric-values">Summing Numeric Values</a></li>
<li><a href="#concatenating-sequences">Concatenating Sequences</a></li>
<li><a href="#practicing-with-pythons-sum">Practicing With Python&rsquo;s sum()</a><ul>
<li><a href="#computing-cumulative-sums">Computing Cumulative Sums</a></li>
<li><a href="#calculating-the-mean-of-a-sample">Calculating the Mean of a Sample</a></li>
<li><a href="#finding-the-dot-product-of-two-sequences">Finding the Dot Product of Two Sequences</a></li>
<li><a href="#flattening-a-list-of-lists">Flattening a List of Lists</a></li>
</ul>
</li>
<li><a href="#using-alternatives-to-sum">Using Alternatives to sum()</a><ul>
<li><a href="#summing-floating-point-numbers-mathfsum">Summing Floating-Point Numbers: math.fsum()</a></li>
<li><a href="#concatenating-iterables-with-itertoolschain">Concatenating Iterables With itertools.chain()</a></li>
<li><a href="#concatenating-strings-with-strjoin">Concatenating Strings With str.join()</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>

      </div>
    

    
    <div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
      
<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:12.5%;"></div>
  <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
<a class="small text-muted" href="/account/join/" rel="nofollow"><i class="fa fa-info-circle mr-1" aria-hidden="true"></i>Remove ads</a>


    </div>
    

    

    <p>Python&rsquo;s built-in function <code>sum()</code> is an efficient and <a href="https://realpython.com/learning-paths/writing-pythonic-code/">Pythonic</a> way to sum a list of numeric values. Adding several numbers together is a common intermediate step in many computations, so <code>sum()</code> is a pretty handy tool for a Python programmer.</p>
<p>As an additional and interesting use case, you can concatenate <a href="https://realpython.com/python-lists-tuples/">lists and tuples</a> using <code>sum()</code>, which can be convenient when you need to flatten a list of lists.</p>
<p><strong>In this tutorial, you&rsquo;ll learn how to:</strong></p>
<ul>
<li>Sum numeric values by hand using <strong>general techniques and tools</strong></li>
<li>Use <strong>Python&rsquo;s <code>sum()</code></strong> to add several numeric values efficiently</li>
<li><strong>Concatenate lists and tuples</strong> with <code>sum()</code></li>
<li>Use <code>sum()</code> to approach common <strong>summation problems</strong></li>
<li>Use appropriate values for the <strong>arguments</strong> in <code>sum()</code></li>
<li>Decide between <code>sum()</code> and <strong>alternative tools</strong> to sum and concatenate objects</li>
</ul>
<p>This knowledge will help you efficiently approach and solve summation problems in your code using either <code>sum()</code> or other alternative and specialized tools.</p>
<div class="alert alert-warning" role="alert"><p><strong>Free Bonus:</strong> <a href="" class="alert-link" data-toggle="modal" data-target="#modal-python-cheat-sheet-shortened" data-focus="false">Click here to get a Python Cheat Sheet</a> and learn the basics of Python 3, like working with data types, dictionaries, lists, and Python functions.</p></div>

<section class="section2" id="understanding-the-summation-problem"><h2>Understanding the Summation Problem<a class="headerlink" href="#understanding-the-summation-problem" title="Permanent link"></a></h2>
<p>Summing numeric values together is a fairly common problem in programming. For example, say you have a list of numbers [1, 2, 3, 4, 5] and want to add them together to compute their total sum. With standard arithmetic, you&rsquo;ll do something like this:</p>
<p>1 + 2 + 3 + 4 + 5 = 15</p>
<p>As far as math goes, this expression is pretty straightforward. It walks you through a short series of additions until you find the sum of all the numbers.</p>
<p>It&rsquo;s possible to do this particular calculation by hand, but imagine some other situations where it might not be so possible. If you have a particularly long list of numbers, adding by hand can be inefficient and error-prone. What happens if you don&rsquo;t even know how many items are in the list? Finally, imagine a scenario where the number of items you need to add changes dynamically or unpredictably. </p>
<p>In situations like these, whether you have a long or short list of <a href="https://realpython.com/python-numbers/">numbers</a>, Python can be quite useful to solve <strong>summation problems</strong>.</p>
<p>If you want to sum the numbers by creating your own solution from scratch, then you can try using a <a href="https://realpython.com/python-for-loop/"><code>for</code> loop</a>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">total</span>
<span class="go">15</span>
</code></pre></div>
<p>Here, you first create <code>total</code> and initialize it to <code>0</code>. This <a href="https://realpython.com/python-variables/">variable</a> works as an <a href="https://en.wikipedia.org/wiki/Accumulator_(computing)">accumulator</a> in which you store intermediate results until you get the final one. The loop iterates through <code>numbers</code> and updates <code>total</code> by accumulating each successive value using an <a href="https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements">augmented assignment</a>.</p>
<p>You can also wrap the <code>for</code> loop in a <a href="https://realpython.com/defining-your-own-python-function/">function</a>. This way, you can reuse the code for different lists:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">sum_numbers</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">total</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">sum_numbers</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">sum_numbers</span><span class="p">([])</span>
<span class="go">0</span>
</code></pre></div>
<p>In <code>sum_numbers()</code>, you take an <a href="https://realpython.com/python-for-loop/#iterables">iterable</a>&mdash;specifically, a list of numeric values&mdash;as an argument and <a href="https://realpython.com/python-return-statement/">return</a> the total sum of the values in the input list. If the input list is empty, then the function returns <code>0</code>. The <code>for</code> loop is the same one that you saw before.</p>
<p>You can also use <a href="https://realpython.com/python-recursion/">recursion</a> instead of iteration. Recursion is a <a href="https://realpython.com/python-functional-programming/">functional programming</a> technique where a function is called within its own definition. In other words, a recursive function calls itself in a loop:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">sum_numbers</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">return</span> <span class="mi">0</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">sum_numbers</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">sum_numbers</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="go">15</span>
</code></pre></div>
<p>When you define a recursive function, you take the risk of running into an infinite loop. To prevent this, you need to define both a <strong>base case</strong> that stops the recursion and a <strong>recursive case</strong> to call the function and start the implicit loop.</p>
<p>In the above example, the base case implies that the sum of a zero-length list is <code>0</code>. The recursive case implies that the total sum is the first value, <code>numbers[0]</code>, plus the sum of the rest of the values, <code>numbers[1:]</code>. Because the recursive case uses a shorter sequence on each iteration, you expect to run into the base case when <code>numbers</code> is a zero-length list. As a final result, you get the sum of all the items in your input list, <code>numbers</code>.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> In this example, if you don&rsquo;t check for an empty input list (your base case), then <code>sum_numbers()</code> will never run into an infinite recursive loop. When your <code>numbers</code> list reaches a length of <code>0</code>, the code tries to access an item from the empty list, which raises an <code>IndexError</code> and breaks the loop.</p>
<p>With this kind of implementation, you&rsquo;ll never get a sum from this function. You&rsquo;ll get an <code>IndexError</code> every time.</p>
</div>
<p>Another option to sum a list of numbers in Python is to use <a href="https://realpython.com/python-reduce-function/"><code>reduce()</code></a> from <a href="https://docs.python.org/3/library/functools.html#module-functools"><code>functools</code></a>. To get the sum of a list of numbers, you can pass either <a href="https://docs.python.org/3/library/operator.html#operator.add"><code>operator.add</code></a> or an appropriate <a href="https://realpython.com/python-lambda/"><code>lambda</code> function</a> as the first argument to <code>reduce()</code>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">reduce</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">add</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">reduce</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">reduce</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="p">[])</span>
<span class="gt">Traceback (most recent call last):</span>
    <span class="o">...</span>
<span class="gr">TypeError</span>: <span class="n">reduce() of empty sequence with no initial value</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="go">15</span>
</code></pre></div>
<p>You can call <code>reduce()</code> with a reduction, or <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">folding</a>, <code>function</code> along with an <code>iterable</code> as arguments. Then <code>reduce()</code> uses the input function to process <code>iterable</code> and returns a single cumulative value.</p>
<p>In the first example, the reduction function is <code>add()</code>, which takes two numbers and adds them together. The final result is the sum of the numbers in the input <code>iterable</code>. As a drawback, <code>reduce()</code> raises a <a href="https://realpython.com/python-traceback/#typeerror"><code>TypeError</code></a> when you call it with an empty <code>iterable</code>. </p>
<p>In the second example, the reduction function is a <code>lambda</code> function that returns the addition of two numbers.</p>
<p>Since summations like these are commonplace in programming, coding a new function every time you need to sum some numbers is a lot of repetitive work. Additionally, using <code>reduce()</code> isn&rsquo;t the most readable solution available to you.</p>
<p>Python provides a dedicated built-in function to solve this problem. The function is conveniently called <a href="https://docs.python.org/3/library/functions.html#sum"><code>sum()</code></a>. Since it&rsquo;s a built-in function, you can use it directly in your code without <a href="https://realpython.com/python-import/">importing</a> anything.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle mr-1"></i>Remove ads</a></div></section><section class="section2" id="getting-started-with-pythons-sum"><h2>Getting Started With Python&rsquo;s <code>sum()</code><a class="headerlink" href="#getting-started-with-pythons-sum" title="Permanent link"></a></h2>
<p>Readability is one of the most important principles behind <a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python">Python&rsquo;s philosophy</a>. Visualize what you are asking a loop to do when summing a list of values. You want it to loop over some numbers, accumulate them in an intermediate variable, and return the final sum. However, you can probably imagine a more readable version of summation that doesn&rsquo;t need a loop. You want Python to take some numbers and sum them together.</p>
<p>Now think about how <code>reduce()</code> does summation. Using <code>reduce()</code> is arguably less readable and less straightforward than even the loop-based solution.</p>
<p>This is why <a href="https://docs.python.org/3/whatsnew/2.3.html">Python 2.3</a> added <code>sum()</code> as a built-in function to provide a Pythonic solution to the summation problem. <a href="https://en.wikipedia.org/wiki/Alex_Martelli">Alex Martelli</a> contributed the function, which nowadays is the preferred syntax for summing a list of values:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([])</span>
<span class="go">0</span>
</code></pre></div>
<p>Wow! That&rsquo;s neat, isn&rsquo;t it? It reads like plain English and clearly communicates the action you&rsquo;re performing on the input list. Using <code>sum()</code> is way more readable than a <code>for</code> loop or a <code>reduce()</code> call. Unlike <code>reduce()</code>, <code>sum()</code> doesn&rsquo;t raise a <code>TypeError</code> when you provide an empty iterable. Instead, it understandably returns <code>0</code>.</p>
<p>You can call <code>sum()</code> with the following two arguments:</p>
<ol>
<li><strong><code>iterable</code></strong> is a required argument that can hold any Python iterable. The iterable typically contains numeric values but can also contain <a href="https://realpython.com/python-lists-tuples/">lists or tuples</a>.</li>
<li><strong><code>start</code></strong> is an optional argument that can hold an initial value. This value is then added to the final result. It defaults to <code>0</code>.</li>
</ol>
<p>Internally, <code>sum()</code> adds <code>start</code> plus the values in <code>iterable</code> from left to right. The values in the input <code>iterable</code> are normally numbers, but you can also use lists and tuples. The optional argument <code>start</code> can accept a number, list, or tuple, depending on what is passed to <code>iterable</code>. It can&rsquo;t take a <a href="https://realpython.com/python-strings/">string</a>. </p>
<p>In the following two sections, you&rsquo;ll learn the basics of using <code>sum()</code> in your code.</p>
<section class="section3" id="the-required-argument-iterable"><h3>The Required Argument: <code>iterable</code><a class="headerlink" href="#the-required-argument-iterable" title="Permanent link"></a></h3>
<p>Accepting any Python iterable as its first argument makes <code>sum()</code> generic, reusable, and <a href="https://en.wikipedia.org/wiki/Polymorphism_(computer_science)">polymorphic</a>. Because of this feature, you can use <code>sum()</code> with lists, tuples, <a href="https://realpython.com/python-sets/">sets</a>, <a href="https://realpython.com/python-range/"><code>range</code></a> objects, and <a href="https://realpython.com/python-dicts/">dictionaries</a>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Use a list</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Use a tuple</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Use a set</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">})</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Use a range</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="go">15</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Use a dictionary</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">({</span><span class="mi">1</span><span class="p">:</span> <span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="s2">&quot;three&quot;</span><span class="p">})</span>
<span class="go">6</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">({</span><span class="mi">1</span><span class="p">:</span> <span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="s2">&quot;three&quot;</span><span class="p">}</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="go">6</span>
</code></pre></div>
<p>In all these examples, <code>sum()</code> computes the arithmetic sum of all the values in the input iterable regardless of their types. In the two dictionary examples, both calls to <code>sum()</code> return the sum of the keys of the input dictionary. The first example sums the keys by default and the second example sums the keys because of the <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys"><code>.keys()</code></a> call on the input dictionary. </p>
<p>If your dictionary stores numbers in its values and you would like to sum these values instead of the keys, then you can do this by using <a href="https://docs.python.org/3/library/stdtypes.html#dict.values"><code>.values()</code></a> just like in the <code>.keys()</code> example.</p>
<p>You can also use <code>sum()</code> with a <a href="https://realpython.com/list-comprehension-python/">list comprehension</a> as an argument. Here&rsquo;s an example that computes the sum of the squares of a range of values:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)])</span>
<span class="go">55</span>
</code></pre></div>
<p><a href="https://docs.python.org/3/whatsnew/2.4.html#what-s-new-in-python-2-4">Python 2.4</a> added <a href="https://realpython.com/introduction-to-python-generators/#building-generators-with-generator-expressions">generator expressions</a> to the language. Again, <code>sum()</code> works as expected when you use a generator expression as an argument:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="go">55</span>
</code></pre></div>
<p>This example shows one of the most Pythonic techniques to approach the summation problem. It provides an elegant, readable, and efficient solution in a single line of code.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle mr-1"></i>Remove ads</a></div></section><section class="section3" id="the-optional-argument-start"><h3>The Optional Argument: <code>start</code><a class="headerlink" href="#the-optional-argument-start" title="Permanent link"></a></h3>
<p>The second and optional argument, <code>start</code>, allows you to provide a value to initialize the summation process. This argument is handy when you need to process cumulative values sequentially:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="mi">100</span><span class="p">)</span>  <span class="c1"># Positional argument</span>
<span class="go">115</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">start</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>  <span class="c1"># Keyword argument</span>
<span class="go">115</span>
</code></pre></div>
<p>Here, you provide an initial value of <code>100</code> to <code>start</code>. The net effect is that <code>sum()</code> adds this value to the cumulative sum of the values in the input iterable. Note that you can provide <code>start</code> as a <a href="https://realpython.com/defining-your-own-python-function/#positional-arguments">positional argument</a> or as a <a href="https://realpython.com/defining-your-own-python-function/#keyword-arguments">keyword argument</a>. The latter option is way more explicit and readable.</p>
<p>If you don&rsquo;t provide a value to <code>start</code>, then it defaults to <code>0</code>. A default value of <code>0</code> ensures the expected behavior of returning the total sum of the input values.</p>
</section></section><section class="section2" id="summing-numeric-values"><h2>Summing Numeric Values<a class="headerlink" href="#summing-numeric-values" title="Permanent link"></a></h2>
<p>The primary purpose of <code>sum()</code> is to provide a Pythonic way to add numeric values together. Up to this point, you&rsquo;ve seen how to use the function to sum integer numbers. Additionally, you can use <code>sum()</code> with any other numeric Python types, such as <a href="https://realpython.com/python-numbers/#floating-point-numbers"><code>float</code></a>, <a href="https://realpython.com/python-complex-numbers/"><code>complex</code></a>, <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal"><code>decimal.Decimal</code></a>, and <a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction"><code>fractions.Fraction</code></a>.</p>
<p>Here are a few examples of using <code>sum()</code> with values of different numeric types:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">Decimal</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">fractions</span> <span class="kn">import</span> <span class="n">Fraction</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Sum floating-point numbers</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mf">10.2</span><span class="p">,</span> <span class="mf">12.5</span><span class="p">,</span> <span class="mf">11.8</span><span class="p">])</span>
<span class="go">34.5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mf">10.2</span><span class="p">,</span> <span class="mf">12.5</span><span class="p">,</span> <span class="mf">11.8</span><span class="p">,</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&quot;inf&quot;</span><span class="p">)])</span>
<span class="go">inf</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mf">10.2</span><span class="p">,</span> <span class="mf">12.5</span><span class="p">,</span> <span class="mf">11.8</span><span class="p">,</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&quot;nan&quot;</span><span class="p">)])</span>
<span class="go">nan</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Sum complex numbers</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="n">j</span><span class="p">,</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">6</span><span class="n">j</span><span class="p">])</span>
<span class="go">(8+8j)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Sum Decimal numbers</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="n">Decimal</span><span class="p">(</span><span class="s2">&quot;10.2&quot;</span><span class="p">),</span> <span class="n">Decimal</span><span class="p">(</span><span class="s2">&quot;12.5&quot;</span><span class="p">),</span> <span class="n">Decimal</span><span class="p">(</span><span class="s2">&quot;11.8&quot;</span><span class="p">)])</span>
<span class="go">Decimal(&#39;34.5&#39;)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Sum Fraction numbers</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="n">Fraction</span><span class="p">(</span><span class="mi">51</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">Fraction</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">Fraction</span><span class="p">(</span><span class="mi">59</span><span class="p">,</span> <span class="mi">5</span><span class="p">)])</span>
<span class="go">Fraction(69, 2)</span>
</code></pre></div>
<p>Here, you first use <code>sum()</code> with <strong>floating-point</strong> numbers. It&rsquo;s worth noting the function&rsquo;s behavior when you use the special symbols <code>inf</code> and <code>nan</code> in the calls <code>float("inf")</code> and <code>float("nan")</code>. The first symbol represents an <strong>infinite</strong> value, so <code>sum()</code> returns <code>inf</code>. The second symbol represents <a href="https://en.wikipedia.org/wiki/NaN">NaN (not a number)</a> values. Since you can&rsquo;t add numbers with non-numbers, you get <code>nan</code> as a result.</p>
<p>The other examples sum iterables of <code>complex</code>, <code>Decimal</code>, and <code>Fraction</code> numbers. In all cases, <code>sum()</code> returns the resulting cumulative sum using the appropriate numeric type.</p>
</section><section class="section2" id="concatenating-sequences"><h2>Concatenating Sequences<a class="headerlink" href="#concatenating-sequences" title="Permanent link"></a></h2>
<p>Even though <code>sum()</code> is mostly intended to operate on numeric values, you can also use the function to concatenate sequences such as lists and tuples. To do that, you need to provide an appropriate value to <code>start</code>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">num_lists</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">num_lists</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="p">[])</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Equivalent concatenation</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="go">[1, 2, 3, 4, 5, 6]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">num_tuples</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">num_tuples</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="p">())</span>
<span class="go">(1, 2, 3, 4, 5, 6)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="c1"># Equivalent concatenation</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="go">(1, 2, 3, 4, 5, 6)</span>
</code></pre></div>
<p>In these examples, you use <code>sum()</code> to concatenate lists and tuples. This is an interesting feature that you can use to flatten a list of lists or a tuple of tuples. The key requirement for these examples to work is to select an appropriate value for <code>start</code>. For example, if you want to concatenate lists, then <code>start</code> needs to hold a list.</p>
<p>In the examples above, <code>sum()</code> is internally performing a concatenation operation, so it works only with those sequence types that support concatenation, with the exception of strings:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">num_strs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;123&quot;</span><span class="p">,</span> <span class="s2">&quot;456&quot;</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">num_strs</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
<span class="gr">TypeError</span>: <span class="n">sum() can&#39;t sum strings [use &#39;&#39;.join(seq) instead]</span>
</code></pre></div>
<p>When you try to use <code>sum()</code> to concatenate strings, you get a <code>TypeError</code>. As the exception message suggests, you should use <a href="https://docs.python.org/3/library/stdtypes.html#str.join"><code>str.join()</code></a> to concatenate strings in Python. You&rsquo;ll see examples of using this method later on when you get to the section on <a href="#using-alternatives-to-sum">Using Alternatives to <code>sum()</code></a>.</p>
</section><section class="section2" id="practicing-with-pythons-sum"><h2>Practicing With Python&rsquo;s <code>sum()</code><a class="headerlink" href="#practicing-with-pythons-sum" title="Permanent link"></a></h2>
<p>So far, you&rsquo;ve learned the basics of working with <code>sum()</code>. You&rsquo;ve learned how to use this function to add numeric values together and also to concatenate sequences such as lists and tuples.</p>
<p>In this section, you&rsquo;ll look at some more examples of when and how to use <code>sum()</code> in your code. With these practical examples, you&rsquo;ll learn that this built-in function is quite handy when you&rsquo;re performing computations that require finding the sum of a series of numbers as an intermediate step.</p>
<p>You&rsquo;ll also learn that <code>sum()</code> can be helpful when you&rsquo;re working with lists and tuples. A special example you&rsquo;ll look at is when you need to flatten a list of lists.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle mr-1"></i>Remove ads</a></div><section class="section3" id="computing-cumulative-sums"><h3>Computing Cumulative Sums<a class="headerlink" href="#computing-cumulative-sums" title="Permanent link"></a></h3>
<p>The first example you&rsquo;ll code has to do with how to take advantage of the <code>start</code> argument for summing cumulative lists of numeric values. </p>
<p>Say you&rsquo;re developing a system to manage the sales of a given product at several different points of sale. Every day, you get a sold units report from each point of sale. You need to systematically compute the cumulative sum to know how many units the whole company sold over the week. To solve this problem, you can use <code>sum()</code>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span> <span class="o">=</span> <span class="mi">0</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">monday</span> <span class="o">=</span> <span class="p">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">42</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">monday</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="n">cumulative_sales</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span>
<span class="go">119</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tuesday</span> <span class="o">=</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">tuesday</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="n">cumulative_sales</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span>
<span class="go">178</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">wednesday</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">42</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">wednesday</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="n">cumulative_sales</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">cumulative_sales</span>
<span class="go">264</span>
<span class="go">    ...</span>
</code></pre></div>
<p>By using <code>start</code>, you set an initial value to initialize the sum, which allows you to add successive units to the previously computed subtotal. At the end of the week, you&rsquo;ll have the company&rsquo;s total count of sold units.</p>
</section><section class="section3" id="calculating-the-mean-of-a-sample"><h3>Calculating the Mean of a Sample<a class="headerlink" href="#calculating-the-mean-of-a-sample" title="Permanent link"></a></h3>
<p>Another practical use case of <code>sum()</code> is to use it as an intermediate calculation before doing further calculations. For example, say you need to calculate the <a href="https://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of a sample of numeric values. The arithmetic mean, also known as the <strong>average</strong>, is the total sum of the values divided by the number of values, or <a href="https://en.wikipedia.org/wiki/Unit_of_observation#Data_point">data points</a>, in the sample.</p>
<p>If you have the sample [2, 3, 4, 2, 3, 6, 4, 2] and you want to calculate the arithmetic mean by hand, then you can solve this operation:</p>
<p>(2 + 3 + 4 + 2 + 3 + 6 + 4 + 2) / 8 = 3.25</p>
<p>If you want to speed this up by using Python, you can break it up into two parts. The first part of this computation, where you are adding together the numbers, is a task for <code>sum()</code>. The next part of the operation, where you are dividing by 8, uses the count of numbers in your sample. To calculate your <a href="https://en.wikipedia.org/wiki/Divisor">divisor</a>, you can use <a href="https://realpython.com/len-python-function/"><code>len()</code></a>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">data_points</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">data_points</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_points</span><span class="p">)</span>
<span class="go">3.25</span>
</code></pre></div>
<p>Here, the call to <code>sum()</code> computes the total sum of the data points in your sample. Next, you use <code>len()</code> to get the number of data points. Finally, you perform the required division to calculate the sample&rsquo;s arithmetic mean.</p>
<p>In practice, you may want to turn this code into a function with some additional features, such as a descriptive name and a check for empty samples:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="c1"># Python &gt;= 3.8</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">average</span><span class="p">(</span><span class="n">data_points</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="p">(</span><span class="n">num_points</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_points</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;average requires at least one data point&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">data_points</span><span class="p">)</span> <span class="o">/</span> <span class="n">num_points</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">average</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="go">3.25</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">average</span><span class="p">([])</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">3</span>, in <span class="n">average</span>
<span class="gr">ValueError</span>: <span class="n">average requires at least one data point</span>
</code></pre></div>
<p>Inside <code>average()</code>, you first check if the input sample has any data points. If not, then you raise a <code>ValueError</code> with a descriptive message. In this example, you use the <a href="https://realpython.com/python38-new-features/#the-walrus-in-the-room-assignment-expressions">walrus operator</a> to store the number of data points in the variable <code>num_points</code> so that you won&rsquo;t need to call <code>len()</code> again. The <a href="https://realpython.com/python-return-statement/">return statement</a> computes the sample&rsquo;s arithmetic mean and sends it back to the calling code.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> Computing the mean of a sample of data is a common operation in statistics and data analysis. The Python standard library provides a convenient module called <a href="https://docs.python.org/3/library/statistics.html#module-statistics"><code>statistics</code></a> to approach these kinds of calculations.</p>
<p>In the <code>statistics</code> module, you&rsquo;ll find a function called <a href="https://docs.python.org/3/library/statistics.html#statistics.mean"><code>mean()</code></a>:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">statistics</span> <span class="kn">import</span> <span class="n">mean</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">mean</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="go">3.25</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">mean</span><span class="p">([])</span>
<span class="gt">Traceback (most recent call last):</span>
    <span class="o">...</span>
<span class="gr">statistics.StatisticsError</span>: <span class="n">mean requires at least one data point</span>
</code></pre></div>
<p>The <code>statistics.mean()</code> function has very similar behavior to the <code>average()</code> function you coded earlier. When you call <code>mean()</code> with a sample of numeric values, you&rsquo;ll get the arithmetic mean of the input data. When you pass an empty list to <code>mean()</code>, you&rsquo;ll get a <code>statistics.StatisticsError</code>.</p>
</div>
<p>Note that when you call <code>average()</code> with a proper sample, you&rsquo;ll get the desired mean. If you call <code>average()</code> with an empty sample, then you get a <code>ValueError</code> as expected.</p>
</section><section class="section3" id="finding-the-dot-product-of-two-sequences"><h3>Finding the Dot Product of Two Sequences<a class="headerlink" href="#finding-the-dot-product-of-two-sequences" title="Permanent link"></a></h3>
<p>Another problem you can solve using <code>sum()</code> is finding the <a href="https://en.wikipedia.org/wiki/Dot_product">dot product</a> of two equal-length sequences of numeric values. The dot product is the algebraic sum of <a href="https://en.wikipedia.org/wiki/Product_(mathematics)">products</a> of every pair of values in the input sequences. For example, if you have the sequences (1, 2, 3) and (4, 5, 6), then you can calculate their dot product by hand using addition and multiplication:</p>
<p>1 × 4 + 2 × 5 + 3 × 6 = 32</p>
<p>To extract successive pairs of values from the input sequences, you can use <a href="https://realpython.com/python-zip-function/"><code>zip()</code></a>. Then you can use a generator expression to multiply each pair of values. Finally, <code>sum()</code> can sum the products:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">x_vector</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">y_vector</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">x_vector</span><span class="p">,</span> <span class="n">y_vector</span><span class="p">))</span>
<span class="go">32</span>
</code></pre></div>
<p>With <code>zip()</code>, you generate a list of tuples with the values from each of the input sequences. The generator expression loops over each tuple while multiplying the successive pairs of values previously arranged by <code>zip()</code>. The final step is to add the products together using <code>sum()</code>.</p>
<p>The code in the above example works. However, the dot product is defined for sequences of equal length, so what happens if you provide sequences with different lengths? In that case, <code>zip()</code> ignores the extra values from the longest sequence, which leads to an incorrect result.</p>
<p>To deal with this possibility, you can wrap the call to <code>sum()</code> in a custom function and provide a proper check for the length of the input sequences:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">dot_product</span><span class="p">(</span><span class="n">x_vector</span><span class="p">,</span> <span class="n">y_vector</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">x_vector</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y_vector</span><span class="p">):</span>
<span class="gp">... </span>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;Vectors must have equal sizes&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">x_vector</span><span class="p">,</span> <span class="n">y_vector</span><span class="p">))</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">dot_product</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="go">32</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">dot_product</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="gt">Traceback (most recent call last):</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">3</span>, in <span class="n">dot_product</span>
<span class="gr">ValueError</span>: <span class="n">Vectors must have equal sizes</span>
</code></pre></div>
<p>Here, <code>dot_product()</code> takes two sequences as arguments and returns their corresponding dot product. If the input sequences have different lengths, then the function raises a <code>ValueError</code>.</p>
<p>Embedding the functionality in a custom function allows you to reuse the code. It also gives you the opportunity to name the function descriptively so that the user knows what the function does just by reading its name.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle mr-1"></i>Remove ads</a></div></section><section class="section3" id="flattening-a-list-of-lists"><h3>Flattening a List of Lists<a class="headerlink" href="#flattening-a-list-of-lists" title="Permanent link"></a></h3>
<p>Flattening a list of lists is a common task in Python. Say you have a list of lists and need to flatten it into a single list containing all the items from the original nested lists. You can use any of several <a href="https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-a-list-of-lists">approaches to flattening lists in Python</a>. For example, you can use a <code>for</code> loop, as in the following code:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">flatten_list</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">flat</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">a_list</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">flat</span> <span class="o">+=</span> <span class="n">sublist</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">flat</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="gp">... </span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">flatten_list</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre></div>
<p>Inside <code>flatten_list()</code>, the loop iterates over all the nested lists contained in <code>a_list</code>. Then it concatenates them in <code>flat</code> using an augmented assignment operation (<code>+=</code>). As the result, you get a flat list with all the items from the original nested lists.</p>
<p>But hold on! You&rsquo;ve already learned how to use <code>sum()</code> to concatenate sequences in this tutorial. Can you use that feature to flatten a list of lists like you did in the example above? Yes! Here&rsquo;s how:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="gp">... </span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="p">[])</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre></div>
<p>That was quick! A single line of code and <code>matrix</code> is now a flat list. However, using <code>sum()</code> doesn&rsquo;t seem to be the fastest solution.</p>
<p>An important drawback of any solution that implies concatenation is that behind the scenes, every intermediate step creates a new list. This can be pretty wasteful in terms of memory usage. The list that is eventually returned is just the most recently created list out of all the lists that were created at each round of concatenation. Using a list comprehension instead ensures that you create and return only one list:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">flatten_list</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">a_list</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">]</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="gp">... </span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">flatten_list</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre></div>
<p>This new version of <code>flatten_list()</code> is more efficient and less wasteful in terms of memory usage. However, the <a href="https://realpython.com/list-comprehension-python/#watch-out-for-nested-comprehensions">nested comprehensions</a> can be challenging to read and understand.</p>
<p>Using <a href="https://realpython.com/python-append/"><code>.append()</code></a> is probably the most readable and Pythonic way to flatten a list of lists:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">flatten_list</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">flat</span> <span class="o">=</span> <span class="p">[]</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">sublist</span> <span class="ow">in</span> <span class="n">a_list</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">sublist</span><span class="p">:</span>
<span class="gp">... </span>            <span class="n">flat</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">flat</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="gp">... </span>    <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="gp">... </span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">flatten_list</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre></div>
<p>In this version of <code>flatten_list()</code>, someone reading your code can see that the function iterates over every <code>sublist</code> in <code>a_list</code>. Inside this first <code>for</code> loop, it iterates over each <code>item</code> in <code>sublist</code> to finally populate the new <code>flat</code> list with <code>.append()</code>. Just like the comprehension from earlier, this solution creates only one list in the process. An advantage of this solution is that it is very readable.</p>
</section></section><section class="section2" id="using-alternatives-to-sum"><h2>Using Alternatives to <code>sum()</code><a class="headerlink" href="#using-alternatives-to-sum" title="Permanent link"></a></h2>
<p>As you&rsquo;ve already learned, <code>sum()</code> is helpful for working with numeric values in general. However, when it comes to working with floating-point numbers, Python provides an alternative tool. In <a href="https://realpython.com/python-math-module/"><code>math</code></a>, you&rsquo;ll find a function called <a href="https://docs.python.org/3/library/math.html#math.fsum"><code>fsum()</code></a> that can help you improve the general precision of your floating-point computations.</p>
<p>You might have a task where you want to concatenate or chain several iterables so that you can work with them as one. For this scenario, you can look to the <a href="https://realpython.com/python-itertools/"><code>itertools</code></a> module&rsquo;s function <a href="https://docs.python.org/3/library/itertools.html#itertools.chain"><code>chain()</code></a>.</p>
<p>You might also have a task where you want to concatenate a list of strings. You&rsquo;ve learned in this tutorial that there&rsquo;s no way to use <code>sum()</code> for concatenating strings. This function just wasn&rsquo;t built for string concatenation. The most Pythonic alternative is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.join"><code>str.join()</code></a>.</p>
<section class="section3" id="summing-floating-point-numbers-mathfsum"><h3>Summing Floating-Point Numbers: <code>math.fsum()</code><a class="headerlink" href="#summing-floating-point-numbers-mathfsum" title="Permanent link"></a></h3>
<p>If your code is constantly summing floating-point numbers with <code>sum()</code>, then you should consider using <code>math.fsum()</code> instead. This function performs floating-point computations more carefully than <code>sum()</code>, which improves the precision of your computation.</p>
<p>According to its <a href="https://docs.python.org/3/library/math.html#math.fsum">documentation</a>, <code>fsum()</code> &ldquo;avoids loss of precision by tracking multiple intermediate partial sums.&rdquo; The documentation provides the following example:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">fsum</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">])</span>
<span class="go">0.9999999999999999</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fsum</span><span class="p">([</span><span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">,</span> <span class="mf">.1</span><span class="p">])</span>
<span class="go">1.0</span>
</code></pre></div>
<p>With <code>fsum()</code>, you get a more precise result. However, you should note that <code>fsum()</code> doesn&rsquo;t solve the <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic#Internal_representation">representation</a> error in floating-point arithmetic. The following example uncovers this limitation:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">fsum</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="go">0.30000000000000004</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fsum</span><span class="p">([</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">])</span>
<span class="go">0.30000000000000004</span>
</code></pre></div>
<p>In these examples, both functions return the same result. This is due to the impossibility of accurately representing both values <code>0.1</code> and <code>0.2</code> in binary floating-point:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="mf">0.1</span><span class="si">:</span><span class="s2">.28f</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="go">&#39;0.1000000000000000055511151231&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="mf">0.2</span><span class="si">:</span><span class="s2">.28f</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="go">&#39;0.2000000000000000111022302463&#39;</span>
</code></pre></div>
<p>Unlike <code>sum()</code>, however, <code>fsum()</code> can help you reduce floating-point error propagation when you add very large and very small numbers together:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">fsum</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mf">1e-16</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1e16</span><span class="p">])</span>
<span class="go">1e+16</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fsum</span><span class="p">([</span><span class="mf">1e-16</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1e16</span><span class="p">])</span>
<span class="go">1.0000000000000002e+16</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1e100</span><span class="p">,</span> <span class="o">-</span><span class="mf">1e100</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10_000</span><span class="p">)</span>
<span class="go">0.0</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fsum</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1e100</span><span class="p">,</span> <span class="o">-</span><span class="mf">1e100</span><span class="p">]</span> <span class="o">*</span> <span class="mi">10_000</span><span class="p">)</span>
<span class="go">20000.0</span>
</code></pre></div>
<p>Wow! The second example is pretty surprising and totally defeats <code>sum()</code>. With <code>sum()</code>, you get <code>0.0</code> as a result. This is quite far away from the correct result of <code>20000.0</code>, as you get with <code>fsum()</code>.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"><div style="display:block;width:100%;padding-top:12.5%;"></div><div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div></div><a class="small text-muted" href="/account/join/" rel="nofollow"><i aria-hidden="true" class="fa fa-info-circle mr-1"></i>Remove ads</a></div></section><section class="section3" id="concatenating-iterables-with-itertoolschain"><h3>Concatenating Iterables With <code>itertools.chain()</code><a class="headerlink" href="#concatenating-iterables-with-itertoolschain" title="Permanent link"></a></h3>
<p>If you&rsquo;re looking for a handy tool for concatenating or chaining a series of iterables, then consider using <code>chain()</code> from <code>itertools</code>. This function can take multiple iterables and build an <a href="https://docs.python.org/3/glossary.html#term-iterator">iterator</a> that yields items from the first one, from the second one, and so on until it exhausts all the input iterables:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="n">chain</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
<span class="go">&lt;itertools.chain object at 0x7f0d0f160a30&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
<span class="go">2</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chain</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]))</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre></div>
<p>When you call <code>chain()</code>, you get an iterator of the items from the input iterables. In this example, you access successive items from <code>numbers</code> using <a href="https://docs.python.org/3/library/functions.html#next"><code>next()</code></a>. If you want to work with a list instead, then you can use <code>list()</code> to consume the iterator and return a regular Python list.</p>
<p><code>chain()</code> is also a good option for flattening a list of lists in Python:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="n">matrix</span><span class="p">))</span>
<span class="go">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre></div>
<p>To flatten a list of lists with <code>chain()</code>, you need to use the <strong>iterable unpacking operator</strong> (<code>*</code>). This operator unpacks all the input iterables so that <code>chain()</code> can work with them and generate the corresponding iterator. The final step is to call <code>list()</code> to build the desired flat list.</p>
</section><section class="section3" id="concatenating-strings-with-strjoin"><h3>Concatenating Strings With <code>str.join()</code><a class="headerlink" href="#concatenating-strings-with-strjoin" title="Permanent link"></a></h3>
<p>As you&rsquo;ve already seen, <code>sum()</code> doesn&rsquo;t <a href="https://realpython.com/python-string-split-concatenate-join/">concatenate or join</a> strings. If you need to do so, then the preferred and fastest tool available in Python is <code>str.join()</code>. This method takes a sequence of strings as an argument and returns a new, concatenated string:</p>
<div class="highlight python repl"><span class="repl-toggle" title="Toggle REPL prompts and output">&gt;&gt;&gt;</span><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">greeting</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s2">&quot;welcome to&quot;</span><span class="p">,</span> <span class="s2">&quot;Real Python!&quot;</span><span class="p">]</span>

<span class="gp">&gt;&gt;&gt; </span><span class="s2">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
<span class="go">&#39;Hello, welcome to Real Python!&#39;</span>
</code></pre></div>
<p>Using <code>.join()</code> is the most efficient and Pythonic way to concatenate strings. Here, you use a list of strings as an argument and build a single string from the input. Note that <code>.join()</code> uses the string on which you call the method as a separator during the concatenation. In this example, you call <code>.join()</code> on a string that consists of a single space character (<code>" "</code>), so the original strings from <code>greeting</code> are separated by spaces in your final string.</p>
</section></section><section class="section2" id="conclusion"><h2>Conclusion<a class="headerlink" href="#conclusion" title="Permanent link"></a></h2>
<p>You can now use Python&rsquo;s built-in function <a href="https://docs.python.org/3/library/functions.html#sum"><code>sum()</code></a> to add multiple numeric values together. This function provides an efficient, readable, and Pythonic way to solve <strong>summation problems</strong> in your code. If you&rsquo;re dealing with math computations that require summing numeric values, then <code>sum()</code> can be your lifesaver.</p>
<p><strong>In this tutorial, you learned how to:</strong></p>
<ul>
<li>Sum numeric values using <strong>general techniques and tools</strong></li>
<li>Add several numeric values efficiently using <strong>Python&rsquo;s <code>sum()</code></strong></li>
<li><strong>Concatenate sequences</strong> using <code>sum()</code></li>
<li>Use <code>sum()</code> to approach common <strong>summation problems</strong></li>
<li>Use appropriate values for the <strong><code>iterable</code> and <code>start</code> arguments</strong> in <code>sum()</code></li>
<li>Decide between <code>sum()</code> and <strong>alternative tools</strong> to sum and concatenate objects</li>
</ul>
<p>With this knowledge, you&rsquo;re now able to add multiple numeric values together in a Pythonic, readable, and efficient way.</p>
</section>

    
      
      <div class="text-center my-3">
        <div class="jsCompletionStatusWidget btn-group mb-0">
  <button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
  <button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><i class="fa fa-fw fa-bookmark-o"></i></button>
</div>

        <span class="ml-2"><div class="btn-group mb-0">
  <a class="btn btn-secondary border-right px-3" style="border-top-right-radius: 0; border-bottom-right-radius: 0;" title="Liked it" aria-label="Thumbs up (liked it)" href="/feedback/survey/article/python-sum-function/liked/?from=article-footer" target="_blank"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></a>
  <a class="btn btn-secondary border-left px-3" aria-label="Thumbs down (disliked it)" title="Disliked it" href="/feedback/survey/article/python-sum-function/disliked/?from=article-footer" target="_blank"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></a>
</div>
</span>
      </div>
    

    
  </div>

  
    

<div class="card mt-4 mb-4 bg-secondary">
  <p class="card-header h3 text-center bg-light">🐍 Python Tricks 💌</p>
  <div class="card-body">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-sm-7">
          <p>Get a short &amp; sweet <strong>Python Trick</strong> delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.</p>
        </div>
        <div class="col-xs-12 col-sm-5">
          <img class="img-fluid rounded mb-3" src="https://cdn.realpython.com/static/pytrick-dict-merge.4201a0125a5e.png" width="738" height="490" alt="Python Tricks Dictionary Merge">
        </div>
      </div>
      <div class="row mb-3">
        <form class="col-12" action="/optins/process/" method="post">
          <input type="hidden" name="csrfmiddlewaretoken" value="sg4Dx5gfut8DWOzpRP1djjeizgQWwl7gk9hKwQ7yKZ2AN9Xpqz1ftFEfUkpIwgMs">
          <input type="hidden" name="slug" value="static-python-tricks-footer">
          <div class="form-group">
            <input name="email" type="email" class="form-control form-control-lg" placeholder="Email Address" required>
          </div>
          <button name="submit" type="submit" class="btn btn-primary btn-lg btn-block">Send Me Python Tricks »</button>
        </form>
      </div>
    </div>
  </div>
</div>


  

  



<div class="card mt-3" id="author">
  <p class="card-header h3">About <strong>Leodanis Pozo Ramos</strong></p>
  <div class="card-body">
    <div class="container p-0">
      <div class="row">
        <div class="col-12 col-md-3 align-self-center">
          <a href="/team/lpozoramos/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=215&amp;h=215&amp;mode=crop&amp;sig=d5445576454e66fffb8c54c94a51779f114f6d98 215w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=431&amp;h=431&amp;mode=crop&amp;sig=09e05527710aa4fc68ca8cc43070c43c6aa15011 431w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8 862w" sizes="25vw" width="862" height="862" class="d-block d-md-none rounded-circle img-fluid w-33 mb-0 mx-auto" alt="Leodanis Pozo Ramos"></a>
          <a href="/team/lpozoramos/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=215&amp;h=215&amp;mode=crop&amp;sig=d5445576454e66fffb8c54c94a51779f114f6d98 215w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=431&amp;h=431&amp;mode=crop&amp;sig=09e05527710aa4fc68ca8cc43070c43c6aa15011 431w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/Perfil_final1.9f896bc212f6.jpg&amp;w=862&amp;h=862&amp;mode=crop&amp;sig=2d089ce1d1dc031cba6526fec6773d79fd0495d8 862w" sizes="25vw" width="862" height="862" class="d-none d-md-block rounded-circle img-fluid w-100 mb-0" alt="Leodanis Pozo Ramos"></a>
        </div>
        <div class="col mt-3">
          <p>Leodanis is an industrial engineer who loves Python and software development. He&#x27;s a self-taught Python developer with 6+ years of experience. He&#x27;s an avid technical writer with a growing number of articles published on Real Python and other sites.</p>
          <a href="/team/lpozoramos/" class="card-link">» More about Leodanis</a>
        </div>
      </div>
    </div>
  </div>
  
  <hr class="my-0">
  <div class="card-body pb-0">
    <div class="container">
      <div class="row">
        <p><em>Each tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are:</em></p>
      </div>

      
        
          <div class="row align-items-center w-100 mx-auto">
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/asantos/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=959&amp;h=959&amp;mode=crop&amp;sig=70bedc2eab90a227eb9a657c415689c3eb1eca4f" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=239&amp;h=239&amp;mode=crop&amp;sig=11667a6dd5c29e4c9363f18be59360551af5eddc 239w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=479&amp;h=479&amp;mode=crop&amp;sig=1541e1ec541357813def826d8507c0565164b701 479w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/PP.9b8b026f75b8.jpg&amp;w=959&amp;h=959&amp;mode=crop&amp;sig=70bedc2eab90a227eb9a657c415689c3eb1eca4f 959w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Aldren Santos"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/asantos/" class="card-link small"><p>Aldren</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/bzaczynski/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-picture.9b78351e1462.jpg&amp;w=900&amp;h=900&amp;mode=crop&amp;sig=84695876e8b66be5e91aa5eb72f25a3fb4dcceeb" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-picture.9b78351e1462.jpg&amp;w=225&amp;h=225&amp;mode=crop&amp;sig=8e1a0d84149944be3c2615404fb46e7da001c17f 225w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-picture.9b78351e1462.jpg&amp;w=450&amp;h=450&amp;mode=crop&amp;sig=2e7c93ebefa8a958432160f29cd4a09c889ae8d3 450w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-picture.9b78351e1462.jpg&amp;w=900&amp;h=900&amp;mode=crop&amp;sig=84695876e8b66be5e91aa5eb72f25a3fb4dcceeb 900w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Bartosz Zaczyński"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/bzaczynski/" class="card-link small"><p>Bartosz</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/jjablonski/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=c363b704eeccb35f2247db13baff3d4383459858" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=200&amp;h=200&amp;mode=crop&amp;sig=706b16de3cb88a8f353f4a98d7c7bc7234229bd0 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=6d7aa672ca3f1ac5f7cd62ed1641b60f98d04d8b 400w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=c363b704eeccb35f2247db13baff3d4383459858 800w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Joanna Jablonski"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/jjablonski/" class="card-link small"><p>Joanna</p></a>
        </div>

        

        
          </div>
        
      
        
          <div class="row align-items-center w-100 mx-auto">
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/jschmitt/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=d10d9fc35ba4a6608969e71b4c24c1e61176ee2d" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=100&amp;h=100&amp;mode=crop&amp;sig=ef40d1115d3b4c306b16314b5555d5dc55361da9 100w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=200&amp;h=200&amp;mode=crop&amp;sig=e1df2f238effe79f5750fc75258642036de498c3 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profile-small_js.2f4d0d8da1ca.jpg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=d10d9fc35ba4a6608969e71b4c24c1e61176ee2d 400w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Jacob Schmitt"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/jschmitt/" class="card-link small"><p>Jacob</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/sparker/"><img loading="lazy" src="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profpic_sp.a008488b6af0.jpeg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=ec9f8b060e53c9b35339584491f286fd52c11452" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profpic_sp.a008488b6af0.jpeg&amp;w=200&amp;h=200&amp;mode=crop&amp;sig=ce5407d34a490d4daf29ad57e74fd3870dd28774 200w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profpic_sp.a008488b6af0.jpeg&amp;w=400&amp;h=400&amp;mode=crop&amp;sig=dfd70d0dde444f036864e5cc145df9b18fbae649 400w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/profpic_sp.a008488b6af0.jpeg&amp;w=800&amp;h=800&amp;mode=crop&amp;sig=ec9f8b060e53c9b35339584491f286fd52c11452 800w" sizes="10vw" width="862" height="862" class="rounded-circle img-fluid w-100" alt="Sadie Parker"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/sparker/" class="card-link small"><p>Sadie</p></a>
        </div>

        
          
          
            <div class="col-4 col-sm-2 align-self-center"></div>
            <div class="col pl-0 d-none d-sm-block"></div>
          
        

        
          </div>
        
      
    </div>
  </div>
  

</div>





  
    

<div class="bg-light rounded py-4 my-4 shadow shadow-sm mx-n2">
  
  <div class="col-12 text-center d-block d-md-none">
    <p class="h2 mb-3">Master <u><span class="marker-highlight">Real-World Python Skills</mark></u> With Unlimited Access to Real&nbsp;Python</p>
    <p class="mb-1"><img class="w-75" src="https://cdn.realpython.com/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260"></p>
    <p class="mx-auto w-75 mb-3 small"><strong>Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert&nbsp;Pythonistas:</strong></p>
    <p class="mb-0"><a href="/account/join/?utm_source=rp_article_footer&utm_content=python-sum-function" class="btn btn-primary btn-sm px-4 mb-0">Level Up Your Python Skills »</a>
  </div>

  
  <div class="col-12 text-center d-none d-md-block">
    <p class="h2 mb-2">Master <u><span class="marker-highlight">Real-World Python Skills</span></u><br>With Unlimited Access to Real&nbsp;Python</p>
    <p class="mb-2"><img class="w-50 mb-2" src="https://cdn.realpython.com/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260"></p>
    <p class="mx-auto w-50 mb-3"><strong>Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas:</strong></p>
    <p><a href="/account/join/?utm_source=rp_article_footer&utm_content=python-sum-function" class="btn btn-primary btn-lg px-4">Level Up Your Python Skills »</a>
  </div>
</div>

  

  
  <div class="card mt-4" id="reader-comments">
    <p class="card-header h3">What Do You Think?</p>
    
    <div class="text-center mt-3 mb-0 p-0">
      <div class="mb-2">
        <strong class="mr-2">Rate this article:</strong>
        <div class="btn-group mb-0">
  <a class="btn btn-secondary border-right px-3" style="border-top-right-radius: 0; border-bottom-right-radius: 0;" title="Liked it" aria-label="Thumbs up (liked it)" href="/feedback/survey/article/python-sum-function/liked/?from=article-comments" target="_blank"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></a>
  <a class="btn btn-secondary border-left px-3" aria-label="Thumbs down (disliked it)" title="Disliked it" href="/feedback/survey/article/python-sum-function/disliked/?from=article-comments" target="_blank"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></a>
</div>

      </div>
      
<span>
  <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check out this %23Python tutorial: Python%27s%20sum%28%29%3A%20The%20Pythonic%20Way%20to%20Sum%20Values by @realpython&url=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
  <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
  
  <a target="_blank" rel="nofollow" href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-linkedin text-light mb-1"><i class="mr-1 fa fa-linkedin text-light"></i>Share</a>
  
  <a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&body=Check out this Python tutorial:%0A%0APython%27s%20sum%28%29%3A%20The%20Pythonic%20Way%20to%20Sum%20Values%0A%0Ahttps%3A//realpython.com/python-sum-function/" class="badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>

    </div>
    
    <div class="card-body">
      <p>What’s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know.</p>

      <div class="alert alert-dark">
        <p class="mb-0"><strong>Commenting Tips:</strong> The most useful comments are those written with the goal of learning from or helping out other students. <a href="https://realpython.com/python-beginner-tips/#tip-9-ask-good-questions" target="_blank">Get tips for asking good questions</a> and <a href="https://support.realpython.com" target="_blank">get answers to common questions in our support portal</a>.<hr>Looking for a real-time conversation? Visit the <a href="/community/" target="_blank">Real Python Community Chat</a> or join the next <a href="/office-hours/" target="_blank">&ldquo;Office&nbsp;Hours&rdquo; Live Q&A Session</a>. Happy Pythoning!</p>

      </div>

      <div class="mb-4" id="disqus_thread">
      
      </div>
      
    </div>
  </div>

  <div class="card mt-4 mb-4">
    <p class="card-header h3">Keep Learning</p>
    <div class="card-body">
      <p class="mb-0">Related Tutorial Categories:
      
        <a href="/tutorials/basics/" class="badge badge-light text-muted">basics</a>
      
        <a href="/tutorials/python/" class="badge badge-light text-muted">python</a>
      
      </p>
      
    </div>
  </div>

  
    

<div class="modal fade" tabindex="-1" role="dialog" id="rprw">
  <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
    <div class="modal-content">

      <div class="modal-header border-0">
        <div class="col-12 col-lg-9 mx-auto modal-title text-center my-2">
          <h2 class="my-0">Keep reading Real&nbsp;Python by creating a free account or signing&nbsp;in:</h2>
        </div>
      </div>

      
      <div class="modal-body bg-light">
        <div class="col-12 text-center">

          <div class="col-12 col-lg-8 mx-auto mb-2 mt-3">
            <a href="/account/signup/?intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fpython-sum-function%2F"><img class="w-100" src="https://cdn.realpython.com/static/videos/lesson-locked.f5105cfd26db.svg" alt="Keep reading"></a>
          </div>

          <p><a href="/account/signup/?intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fpython-sum-function%2F" class="btn btn-primary btn-lg px-5"></i>Continue »</a></p>

        </div>
      </div>
      

      <div class="modal-footer border-0">
        <p class="text-center text-muted mt-2 mb-1">Already have an account? <a href="/account/login/?next=/python-sum-function/">Sign-In</a></p>
      </div>

    </div>
  </div>
</div>

    <script src="https://cdn.realpython.com/static/frontend/reader/rw.38bf29157dfe.js" async></script>
  


    </div>

    <aside class="col-md-7 col-lg-4">
      
  



<div class="card mb-3 bg-secondary">
  <form class="card-body" action="/optins/process/" method="post">
    <div class="form-group">
      <p class="h5 text-muted text-center">— FREE Email Series —</p>
      <p class="h3 text-center">🐍 Python Tricks 💌</p>
      <p><img class="img-fluid rounded" src="https://cdn.realpython.com/static/pytrick-dict-merge.4201a0125a5e.png" width="738" height="490" alt="Python Tricks Dictionary Merge"></p>
    </div>
    <div class="form-group">
      <input type="hidden" name="csrfmiddlewaretoken" value="sg4Dx5gfut8DWOzpRP1djjeizgQWwl7gk9hKwQ7yKZ2AN9Xpqz1ftFEfUkpIwgMs">
      <input type="hidden" name="slug" value="static-python-tricks-sidebar">
      <input type="email" class="form-control form-control-md" name="email" placeholder="Email&hellip;" required>
    </div>
    <button type="submit" name="submit" class="btn btn-primary btn-md btn-block">Get Python Tricks »</button>
    <p class="mb-0 mt-2 text-muted text-center">🔒 No spam. Unsubscribe any time.</p>
  </form>
</div>


  


<div class="sidebar-module sidebar-module-inset border">
  <p class="h4"><a class="link-unstyled" href="/tutorials/all/">All Tutorial Topics</a></p>
    
      <a href="/tutorials/advanced/" class="badge badge-light text-muted">advanced</a> 
    
      <a href="/tutorials/api/" class="badge badge-light text-muted">api</a> 
    
      <a href="/tutorials/basics/" class="badge badge-light text-muted">basics</a> 
    
      <a href="/tutorials/best-practices/" class="badge badge-light text-muted">best-practices</a> 
    
      <a href="/tutorials/community/" class="badge badge-light text-muted">community</a> 
    
      <a href="/tutorials/databases/" class="badge badge-light text-muted">databases</a> 
    
      <a href="/tutorials/data-science/" class="badge badge-light text-muted">data-science</a> 
    
      <a href="/tutorials/devops/" class="badge badge-light text-muted">devops</a> 
    
      <a href="/tutorials/django/" class="badge badge-light text-muted">django</a> 
    
      <a href="/tutorials/docker/" class="badge badge-light text-muted">docker</a> 
    
      <a href="/tutorials/flask/" class="badge badge-light text-muted">flask</a> 
    
      <a href="/tutorials/front-end/" class="badge badge-light text-muted">front-end</a> 
    
      <a href="/tutorials/gamedev/" class="badge badge-light text-muted">gamedev</a> 
    
      <a href="/tutorials/gui/" class="badge badge-light text-muted">gui</a> 
    
      <a href="/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a> 
    
      <a href="/tutorials/machine-learning/" class="badge badge-light text-muted">machine-learning</a> 
    
      <a href="/tutorials/projects/" class="badge badge-light text-muted">projects</a> 
    
      <a href="/tutorials/python/" class="badge badge-light text-muted">python</a> 
    
      <a href="/tutorials/testing/" class="badge badge-light text-muted">testing</a> 
    
      <a href="/tutorials/tools/" class="badge badge-light text-muted">tools</a> 
    
      <a href="/tutorials/web-dev/" class="badge badge-light text-muted">web-dev</a> 
    
      <a href="/tutorials/web-scraping/" class="badge badge-light text-muted">web-scraping</a> 
    
</div>



  
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
  
<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:100%;"></div>
  <div class="rpad" data-unit="1x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>


</div>



  <div class="sidebar-sticky ">
    
      <div class="bg-light sidebar-module sidebar-module-inset" id="sidebar-toc">
        <p class="h4 text-muted"><a class="link-unstyled" href="#toc">Table of Contents</a></p>
        <div class="toc">
<ul>
<li><a href="#understanding-the-summation-problem">Understanding the Summation Problem</a></li>
<li><a href="#getting-started-with-pythons-sum">Getting Started With Python&rsquo;s sum()</a><ul>
<li><a href="#the-required-argument-iterable">The Required Argument: iterable</a></li>
<li><a href="#the-optional-argument-start">The Optional Argument: start</a></li>
</ul>
</li>
<li><a href="#summing-numeric-values">Summing Numeric Values</a></li>
<li><a href="#concatenating-sequences">Concatenating Sequences</a></li>
<li><a href="#practicing-with-pythons-sum">Practicing With Python&rsquo;s sum()</a><ul>
<li><a href="#computing-cumulative-sums">Computing Cumulative Sums</a></li>
<li><a href="#calculating-the-mean-of-a-sample">Calculating the Mean of a Sample</a></li>
<li><a href="#finding-the-dot-product-of-two-sequences">Finding the Dot Product of Two Sequences</a></li>
<li><a href="#flattening-a-list-of-lists">Flattening a List of Lists</a></li>
</ul>
</li>
<li><a href="#using-alternatives-to-sum">Using Alternatives to sum()</a><ul>
<li><a href="#summing-floating-point-numbers-mathfsum">Summing Floating-Point Numbers: math.fsum()</a></li>
<li><a href="#concatenating-iterables-with-itertoolschain">Concatenating Iterables With itertools.chain()</a></li>
<li><a href="#concatenating-strings-with-strjoin">Concatenating Strings With str.join()</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
</div>

      </div>
    

    <div class="sidebar-module sidebar-module-inset text-center my-3 py-0">
      <div class="jsCompletionStatusWidget btn-group mb-0">
  <button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
  <button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><i class="fa fa-fw fa-bookmark-o"></i></button>
</div>

      <div class="my-2">
        <div class="btn-group mb-0">
  <a class="btn btn-secondary border-right px-3" style="border-top-right-radius: 0; border-bottom-right-radius: 0;" title="Liked it" aria-label="Thumbs up (liked it)" href="/feedback/survey/article/python-sum-function/liked/?from=article-sidebar" target="_blank"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i></a>
  <a class="btn btn-secondary border-left px-3" aria-label="Thumbs down (disliked it)" title="Disliked it" href="/feedback/survey/article/python-sum-function/disliked/?from=article-sidebar" target="_blank"><i class="fa fa-thumbs-o-down" aria-hidden="true"></i></a>
</div>

      </div>
    </div>

    
      <div class="sidebar-module sidebar-module-inset text-center my-3 py-0">
        
<span>
  <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Check out this %23Python tutorial: Python%27s%20sum%28%29%3A%20The%20Pythonic%20Way%20to%20Sum%20Values by @realpython&url=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-twitter text-light mb-1"><i class="mr-1 fa fa-twitter text-light"></i>Tweet</a>
  <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A//realpython.com/python-sum-function/" class="mr-1 badge badge-facebook text-light mb-1"><i class="mr-1 fa fa-facebook text-light"></i>Share</a>
  
  <a target="_blank" rel="nofollow" href="mailto:?subject=Python article for you&body=Check out this Python tutorial:%0A%0APython%27s%20sum%28%29%3A%20The%20Pythonic%20Way%20to%20Sum%20Values%0A%0Ahttps%3A//realpython.com/python-sum-function/" class="badge badge-red text-light mb-1"><i class="mr-1 fa fa-envelope text-light"></i>Email</a>
</span>

      </div>
    

    

    
      <div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
        
<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:25%;"></div>
  <div class="rpad" data-unit="4x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>


      </div>
    

    
  </div>


    </aside>

  </div>

    </div>

    
    

    
    
      
        
          <div class="modal fade" id="modal-python-cheat-sheet-shortened" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">

      <div class="modal-header bg-light pt-3 pb-2">
        <div class="container-fluid">
          <div class="row">
            <div class="col-12">
              <div class="progress" style="height: .5rem;">
                <div class="progress-bar progress-bar-striped progress-bar-animated w-75" role="progressbar"></div>
              </div>
            </div>
            <div class="col-12">
              <p class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant access:</p>
            </div>
          </div>
        </div>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <div class="modal-body m-4">
        <div class="container-fluid">
          <div class="row align-items-center">
            <div class="col-12 col-lg-4 mb-4">
              
                <img class="img-fluid rounded" src="https://files.realpython.com/media/python-logo.8eb72ea6927b.png" width="1000" height="1000" srcset="https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-logo.8eb72ea6927b.png&amp;w=250&amp;sig=3922247197a4a17add6954dd288123a4df30e55a 250w, https://robocrop.realpython.net/?url=https%3A//files.realpython.com/media/python-logo.8eb72ea6927b.png&amp;w=500&amp;sig=40c3b1b474ae94aec528188714ba5878a77362ea 500w, https://files.realpython.com/media/python-logo.8eb72ea6927b.png 1000w" sizes="50vw" alt="Python Logo">
              
            </div>
            <div class="col">
              <p class="text-center h3 mb-4">Get the Python Cheat Sheet (Free PDF)</p>

              <form class="col-12" action="/optins/process/" method="post">
                <input type="hidden" name="csrfmiddlewaretoken" value="sg4Dx5gfut8DWOzpRP1djjeizgQWwl7gk9hKwQ7yKZ2AN9Xpqz1ftFEfUkpIwgMs">
                
                <input type="hidden" name="slug" value="python-cheat-sheet-shortened">
                <input type="hidden" name="source_path" value="/python-sum-function/"> 
                <div class="form-group">
                  <input type="email" name="email" class="form-control" placeholder="Email Address" required autofocus>
                </div>
                <button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Send My Python Cheat Sheet »</button>
                <p class="mb-0 mt-2 text-muted text-center"><small>🔒 No spam. We take your privacy seriously.</small></p>
              </form>

            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

        
      
    

    
      <footer class="footer">
  <div class="container">
    
      <div class="mx-auto mt-4 mb-0" style="max-width: 768px;">
        
<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:12.5%;"></div>
  <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
<a class="small text-muted" href="/account/join/" rel="nofollow"><i class="fa fa-info-circle mr-1" aria-hidden="true"></i>Remove ads</a>


      </div>
    

    <p class="text-center text-muted w-75 mx-auto">© 2012–2022 Real&nbsp;Python&nbsp;⋅ <a href="/newsletter/">Newsletter</a>&nbsp;⋅ <a href="/podcasts/rpp/">Podcast</a>&nbsp;⋅ <a href="https://www.youtube.com/realpython">YouTube</a>&nbsp;⋅ <a href="https://twitter.com/realpython">Twitter</a>&nbsp;⋅ <a href="https://facebook.com/LearnRealPython">Facebook</a>&nbsp;⋅ <a href="https://www.instagram.com/realpython/">Instagram</a>&nbsp;⋅ <a href="/">Python&nbsp;Tutorials</a>&nbsp;⋅ <a href="/search">Search</a>&nbsp;⋅ <a href="/privacy-policy/">Privacy Policy</a>&nbsp;⋅ <a href="/energy-policy/" class="">Energy Policy</a>&nbsp;⋅ <a href="/sponsorships/">Advertise</a>&nbsp;⋅ <a href="/contact/">Contact</a><br>❤️ Happy Pythoning!</p>
  </div>
</footer>

    

    
    
    <script>
      (function(document, history, location) {
        var HISTORY_SUPPORT = !!(history && history.pushState);

        var anchorScrolls = {
          ANCHOR_REGEX: /^#[^ ]+$/,
          OFFSET_HEIGHT_PX: 120,

          /**
           * Establish events, and fix initial scroll position if a hash is provided.
           */
          init: function() {
            this.scrollToCurrent();
            window.addEventListener('hashchange', this.scrollToCurrent.bind(this));
            document.body.addEventListener('click', this.delegateAnchors.bind(this));
          },

          /**
           * Return the offset amount to deduct from the normal scroll position.
           * Modify as appropriate to allow for dynamic calculations
           */
          getFixedOffset: function() {
            return this.OFFSET_HEIGHT_PX;
          },

          /**
           * If the provided href is an anchor which resolves to an element on the
           * page, scroll to it.
           * @param  {String} href
           * @return {Boolean} - Was the href an anchor.
           */
          scrollIfAnchor: function(href, pushToHistory) {
            var match, rect, anchorOffset;

            if(!this.ANCHOR_REGEX.test(href)) {
              return false;
            }

            match = document.getElementById(href.slice(1));

            if(match) {
              rect = match.getBoundingClientRect();
              anchorOffset = window.pageYOffset + rect.top - this.getFixedOffset();
              window.scrollTo(window.pageXOffset, anchorOffset);

              // Add the state to history as-per normal anchor links
              if(HISTORY_SUPPORT && pushToHistory) {
                history.pushState({}, document.title, location.pathname + href);
              }
            }

            return !!match;
          },

          /**
           * Attempt to scroll to the current location's hash.
           */
          scrollToCurrent: function() {
            this.scrollIfAnchor(window.location.hash);
          },

          /**
           * If the click event's target was an anchor, fix the scroll position.
           */
          delegateAnchors: function(e) {
            var elem = e.target;

            // 
            if (elem.dataset.toggle === "tab") {
              return;
            }

            if(
              elem.nodeName === 'A' &&
              this.scrollIfAnchor(elem.getAttribute('href'), true)
            ) {
              e.preventDefault();
            }
          }
        };

        window.addEventListener(
          'DOMContentLoaded', anchorScrolls.init.bind(anchorScrolls)
        );
      })(window.document, window.history, window.location);
    </script>
    

    
    <script>
      (function() {
        var isAndroid = navigator.userAgent.toLowerCase().indexOf("android") > -1;
        if (!isAndroid) {
          return;
        }

        var styles = `
        @font-face {
          font-family: 'DejaVu Sans Mono';
          font-weight: normal;
          font-style: normal;
          font-display: swap;
          src: url('https://cdn.realpython.com/static/mfonts/dejavu-sans-mono.33f00225f915.woff2') format('woff2'),
               url('https://cdn.realpython.com/static/mfonts/dejavu-sans-mono.0da77d3739f3.woff') format('woff'),
               url('https://cdn.realpython.com/static/mfonts/dejavu-sans-mono.c2356fc49835.ttf') format('truetype');
        }
        code, kbd, pre, samp {
          font-family: 'DejaVu Sans Mono', monospace;
        }
        `

        var styleSheet = document.createElement("style")
        styleSheet.type = "text/css"
        styleSheet.innerText = styles
        document.head.appendChild(styleSheet)
      })();
    </script>

    
    
    <script src="https://cdn.realpython.com/static/jquery.min.00727d1d5d9c.js"></script>
    <script src="https://cdn.realpython.com/static/popper.min.47dc3aaf2942.js"></script>
    <script src="https://cdn.realpython.com/static/bootstrap.min.a3b2689424c3.js"></script>

    
    

    <script>
    (function() {
      document.querySelectorAll(".js-search-form-submit").forEach(function(el) {
        el.addEventListener("click", function(e) {
          e.preventDefault();
          e.currentTarget.parentElement.submit();
        })
      });
    })();
    </script>
    <script src="https://cdn.realpython.com/static/frontend/reader/repl-toggle.925bef973b9c.js" async></script>
    <script src="https://cdn.realpython.com/static/frontend/reader/lightbox.bab438c0f968.js" async></script>
    <script src="https://cdn.realpython.com/static/frontend/reader/platforms-ui.b11202dc6079.js" async></script>

    

    
    

    

    
    

    

<script>window.rp_prop_id = '58946116052';</script>
<script src="https://srv.realpython.net/tag.js" async></script>



<script src="https://cdn.realpython.com/static/frontend/reader/toc-refresh.76a102c7d921.js" async></script>

<script id="js-context" type="application/json">{"is_completed": false, "is_bookmarked": false, "api_article_bookmark_url": "/api/v1/articles/python-sum-function/bookmark/", "api_article_completion_status_url": "/api/v1/articles/python-sum-function/completion_status/"}</script>
<script src="https://cdn.realpython.com/static/frontend/reader/completion-status.0689aa7a4df0.js" async></script>






  
    <script id="dsq-count-scr" src="https://realpython.disqus.com/count.js" async></script>
    <script>
      var disqus_config = function () {
        this.page.url = 'https://realpython.com/python-sum-function/';
        this.page.identifier = 'https://realpython.com/python-sum-function/';
        this.callbacks.onReady = [function() {
          if (window.onDisqusReady) {
            window.onDisqusReady();
          }
        }];
      };
      var disqus_script_url = 'https://realpython.disqus.com/embed.js';
    </script>
    <script src="https://cdn.realpython.com/static/frontend/reader/lazy-disqus.07ee9079f4a3.js" defer></script>
  


  
  
  <script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async></script>
  <script>
    var OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
      OneSignal.init({
        appId: "c0081e20-a523-42bb-b0ac-04c5a9e8bf40"
      });
    });
  </script>
  

  
  <script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Article",
    "headline": "Python\u0027s sum(): The Pythonic Way to Sum Values",
    
    "image": {
      "@type": "ImageObject",
      "url": "https://files.realpython.com/media/Pythons-sum-with-Examples_Watermarked.7d2beb99a606.jpg",
      "width": 1920,
      "height": 1080
    },
    
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": "https://realpython.com/python-sum-function/"
    },
    "datePublished": "2021-10-06T14:00:00+00:00",
    "dateModified": "2022-02-18T19:49:25.084252+00:00",
     "publisher": {
      "@type": "Organization",
      "name": "Real Python",
      "logo": {
        "@type": "ImageObject",
        "url": "https://cdn.realpython.com/static/real-python-logo-square-tiny.b2452b6d3823.png",
        "width": 60,
        "height": 60
      }
    },
    "author": {
      "@type": "Organization",
      "name": "Real Python",
      "url": "https://realpython.com",
      "logo": "https://cdn.realpython.com/static/real-python-logo-square.146e987bf77c.png"
    },
    "description": "In this step\u002Dby\u002Dstep tutorial, you\u0027ll learn how to use Python\u0027s sum() function to add numeric values together. You also learn how to concatenate sequences, such as lists and tuples, using sum()."
  }
  </script>
  


    

    

    
<script>
  var _dcq = _dcq || [];
  var _dcs = _dcs || {};
  _dcs.account = '6214500';

  (function() {
    var dc = document.createElement('script');
    dc.type = 'text/javascript'; dc.async = true;
    dc.src = '//tag.getdrip.com/6214500.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(dc, s);
  })();
</script>


    
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '2220911568135371');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=2220911568135371&ev=PageView&noscript=1"
/></noscript>


    

    

  <script>(function(){var js = "window['__CF$cv$params']={r:'7724be64eb007bc8',m:'lr9_42vs6f.HYfod7GGwLroVzW0GB2bvLWWt8qmX6rI-1669823478-0-AYAcY0KHRTFf5WXn7uQTyVoxJQeMC4EWohqZlTlFJJa0cyk9EwOD6hziAl11msOWwgmxSoghU56NprmoLgK0ysAYfSRQFFcGs+CIzn7P0YGxOfSodbWJypSj4ALlF7ued9oEM8Raqy0VRZYM5ABW/ns=',s:[0x5e3ca3bba2,0xcaeee89682],u:'/cdn-cgi/challenge-platform/h/b'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/b/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>
